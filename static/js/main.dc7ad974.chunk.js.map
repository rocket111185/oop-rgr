{"version":3,"sources":["components/MainWrapper.jsx","components/FuncPlot.jsx","App.js","index.js","components/InputField.jsx"],"names":["sin","Math","cos","sqrt","fieldValues","func","min","max","delimeter","strToFn","str","eval","MainWrapper","props","state","setNewValue","bind","handleFunc","handleMin","handleMax","handleDelimeter","key","value","this","setTimeout","newValue","includes","Error","predicate","parseFloat","setState","e","alert","message","event","target","className","label","initValue","onChange","React","Component","FuncPlot","prevProps","mn","mx","console","log","num","ceil","norm","axe","Array","fill","map","_","i","trace","x","y","z","row","type","data","layout","width","height","title","App","ReactDOM","render","StrictMode","document","getElementById","InputField","handleChange"],"mappings":"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","file":"static/js/main.dc7ad974.chunk.js","sourcesContent":["import React from 'react';\nimport FuncPlot from './FuncPlot.jsx';\nimport InputField from './InputField.jsx';\nimport './MainWrapper.css';\n\n// eslint-disable-next-line\nconst { sin, cos, sqrt } = Math;\n\nconst fieldValues = {\n  func: 'x ** 2 + y ** 2',\n  min: 0,\n  max: 20,\n  delimeter: 1\n};\n\nconst strToFn = str => eval('(x, y) => ' + str);\n\nexport default class MainWrapper extends React.Component {\n  #lock = 0;\n  constructor(props) {\n    super(props);\n\n    this.state = fieldValues;\n    this.setNewValue = this.setNewValue.bind(this);\n    this.handleFunc = this.handleFunc.bind(this);\n    this.handleMin = this.handleMin.bind(this);\n    this.handleMax = this.handleMax.bind(this);\n    this.handleDelimeter = this.handleDelimeter.bind(this);\n  }\n\n  setNewValue(key, value) {\n    fieldValues[key] = value;\n    ++this.#lock;\n\n    setTimeout(() => {\n      --this.#lock;\n      if (this.#lock === 0) {\n        try {\n\n          const newValue = fieldValues[key];\n\n          if (key === 'func') {\n            if (newValue.includes(';'))\n              throw new Error('semicolon is rejected');\n\n            const predicate = strToFn(newValue);\n            if (typeof predicate(0, 0) !== 'number')\n              throw new Error('should return a number');\n\n          } else {\n            fieldValues[key] = parseFloat(newValue);\n          }\n\n          this.setState(() => fieldValues);\n        } catch (e) {\n          alert(key + ': ' + e.message);\n        }\n      }\n    }, 3000);\n  }\n\n  handleFunc(event) {\n    this.setNewValue('func', event.target.value);\n  }\n\n  handleMin(event) {\n    this.setNewValue('min', event.target.value);\n  }\n\n  handleMax(event) {\n    this.setNewValue('max', event.target.value);\n  }\n\n  handleDelimeter(event) {\n    this.setNewValue('delimeter', event.target.value);\n  }\n\n  render() {\n    const predicate = strToFn(this.state.func);\n    return (\n      <div>\n        <div className=\"inputForm\">\n          <InputField label=\"Функція\"\n            initValue={ this.state.func }\n            onChange={ this.handleFunc } />\n          <InputField label=\"Початок проміжку\"\n            initValue={ this.state.min }\n            onChange={ this.handleMin } />\n          <InputField label=\"Кінець проміжку\"\n            initValue={ this.state.max }\n            onChange={ this.handleMax } />\n          <InputField label=\"Ділення\"\n            initValue={ this.state.delimeter }\n            onChange={ this.handleDelimeter } />\n        </div>\n        <FuncPlot func={ predicate } min={ this.state.min }\n          max={this.state.max } delimeter={ this.state.delimeter } />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Plot from 'react-plotly.js';\n\nexport default class FuncPlot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      func: props.func,\n      min: props.min,\n      max: props.max,\n      delimeter: props.delimeter\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      this.setState({\n        func: this.props.func,\n        min: this.props.min,\n        max: this.props.max,\n        delimeter: this.props.delimeter\n      });\n    }\n  }\n\n  render() {\n    const { min, max, delimeter } = this.state;\n    const [ mn, mx ] = (min < max) ?\n      [ min, max ] :\n      [ max, min ];\n    console.log(mn);\n    console.log(mx);\n    const num = Math.ceil((mx - mn + 1) / delimeter);\n    const norm = value => value * delimeter + mn;\n    const axe = Array(num)\n      .fill(0)\n      .map((_, i) => norm(i));\n    const values = Array(num)\n      .fill(0)\n      .map((row, y) => Array(num)\n        .fill(0)\n        .map((_, x) => this.state.func(norm(x), norm(y))));\n    const trace = [{\n      x: axe,\n      y: axe,\n      z: values,\n      type: 'surface'\n    }];\n    return (\n      <Plot\n        data={ trace }\n        layout={{\n          width: 900,\n          height: 800,\n          title: 'Графік 3D функції'\n        }}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport MainWrapper from './components/MainWrapper.jsx';\n\nfunction App() {\n  return <MainWrapper />;\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport './InputField.css';\n\nexport default class InputField extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.initValue\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"inputField\" onChange={ this.props.onChange }>\n        <label>\n          { this.props.label }\n          <input type=\"text\" value={ this.state.value }\n            onChange={ this.handleChange } />\n        </label>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}